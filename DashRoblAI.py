import os
import telebot
import openai
import time

# ====== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_KEY = os.getenv("OPENAI_KEY")
CREATOR_ID = int(os.getenv("CREATOR_ID", "7602570185"))  # —Ç–≤–æ–π Telegram ID

if not TELEGRAM_TOKEN:
    print("–û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)
if not OPENAI_KEY:
    print("–û—à–∏–±–∫–∞: OPENAI_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)

bot = telebot.TeleBot(TELEGRAM_TOKEN)

creator_mode = False

# ====== –û—Ç–≤–µ—Ç –ò–ò ======
def openai_response(message):
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": message}],
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print("–û—à–∏–±–∫–∞ API OpenAI:", e)
        return "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."

# ====== –ö–æ–º–∞–Ω–¥—ã ======
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç üëã, —è DashRoblAI! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Ç–µ–±–µ. ü§ñ")

@bot.message_handler(commands=['help'])
def help_message(message):
    text = (
        "ü§ñ –ö–æ–º–∞–Ω–¥—ã DashRoblAI:\n\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ DashRoblAI\n"
        "/ask <–≤–æ–ø—Ä–æ—Å> ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò\n"
        "/image <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n"
        "/say <—Ç–µ–∫—Å—Ç> ‚Äî —Å–∫–∞–∑–∞—Ç—å –æ—Ç –∏–º–µ–Ω–∏ –ò–ò (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)\n"
        "/ping ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
        "/creator_mode ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å Creator Mode (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞)\n"
    )
    bot.reply_to(message, text)

@bot.message_handler(commands=['info'])
def info_message(message):
    info = (
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç DashRoblAI ü§ñ\n"
        "–Ø –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫–æ–º @DashRoblYT.\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ–≥–∞—Ç—å, –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
        "–°–µ–π—á–∞—Å —è –Ω–∞—Ö–æ–∂—É—Å—å –≤ —Å—Ç–∞–¥–∏–∏ *–ê–ª—å—Ñ–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*, –ø–æ—ç—Ç–æ–º—É –≤–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ ‚Äî "
        "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç. üí°"
    )
    bot.reply_to(message, info, parse_mode="Markdown")

@bot.message_handler(commands=['ping'])
def ping_command(message):
    bot.reply_to(message, "üèì Pong! DashRoblAI –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.")

@bot.message_handler(commands=['say'])
def say_command(message):
    global creator_mode
    if message.from_user.id == CREATOR_ID:
        text = message.text.replace("/say", "").strip()
        if text:
            prefix = "üíª (Creator mode) DashRoblAI: " if creator_mode else "ü§ñ DashRoblAI: "
            bot.reply_to(message, prefix + text)
        else:
            bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /say <—Ç–µ–∫—Å—Ç>")
    else:
        bot.reply_to(message, "‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.")

@bot.message_handler(commands=['creator_mode'])
def creator_mode_command(message):
    global creator_mode
    if message.from_user.id == CREATOR_ID:
        if "on" in message.text.lower():
            creator_mode = True
            bot.reply_to(message, "üíª Creator Mode –≤–∫–ª—é—á—ë–Ω.")
        elif "off" in message.text.lower():
            creator_mode = False
            bot.reply_to(message, "üíª Creator Mode –≤—ã–∫–ª—é—á–µ–Ω.")
        else:
            bot.reply_to(message, f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {'–í–ö–õ' if creator_mode else '–í–´–ö–õ'}.\n–ò—Å–ø–æ–ª—å–∑—É–π /creator_mode on –∏–ª–∏ off.")
    else:
        bot.reply_to(message, "‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è @DashRoblYT.")

@bot.message_handler(commands=['ask'])
def ask_command(message):
    question = message.text.replace("/ask", "").strip()
    if not question:
        bot.reply_to(message, "‚ùì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ask <–≤–æ–ø—Ä–æ—Å>")
        return
    answer = openai_response(question)
    bot.reply_to(message, answer)

# ====== –†–µ–∞–∫—Ü–∏—è –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ ======
@bot.message_handler(func=lambda m: m.text and "@DashRoblAI" in m.text)
def mention_reply(message):
    user_text = message.text.replace("@DashRoblAI", "").strip()
    if not user_text:
        return
    answer = openai_response(user_text)
    bot.reply_to(message, answer, reply_to_message_id=message.message_id)

# ====== –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ======
@bot.message_handler(func=lambda m: True)
def handle_all(message):
    if message.chat.type == "private":
        answer = openai_response(message.text)
        bot.reply_to(message, answer)

# ====== –ó–∞–ø—É—Å–∫ ======
print("DashRoblAI Telegram Bot –∑–∞–ø—É—â–µ–Ω...")
while True:
    try:
        bot.infinity_polling(timeout=60, long_polling_timeout=60)
    except Exception as e:
        print("–ë–æ—Ç —É–ø–∞–ª, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥:", e)
        time.sleep(5)